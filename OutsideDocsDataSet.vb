'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class OutsideDocsDataSet
    Inherits DataSet
    
    Private tableOutsideDocs As OutsideDocsDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("OutsideDocs")) Is Nothing) Then
                Me.Tables.Add(New OutsideDocsDataTable(ds.Tables("OutsideDocs")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OutsideDocs As OutsideDocsDataTable
        Get
            Return Me.tableOutsideDocs
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As OutsideDocsDataSet = CType(MyBase.Clone,OutsideDocsDataSet)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("OutsideDocs")) Is Nothing) Then
            Me.Tables.Add(New OutsideDocsDataTable(ds.Tables("OutsideDocs")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableOutsideDocs = CType(Me.Tables("OutsideDocs"),OutsideDocsDataTable)
        If (Not (Me.tableOutsideDocs) Is Nothing) Then
            Me.tableOutsideDocs.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "OutsideDocsDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/OutsideDocsDataSet.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableOutsideDocs = New OutsideDocsDataTable
        Me.Tables.Add(Me.tableOutsideDocs)
    End Sub
    
    Private Function ShouldSerializeOutsideDocs() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub OutsideDocsRowChangeEventHandler(ByVal sender As Object, ByVal e As OutsideDocsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OutsideDocsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnPACSID As DataColumn
        
        Private columnLastName As DataColumn
        
        Private columnFirstName As DataColumn
        
        Private columnFullName As DataColumn
        
        Private columnCurrentEmployee As DataColumn
        
        Private columnEmail_Address As DataColumn
        
        Private columnDivision As DataColumn
        
        Private column_Sub_division As DataColumn
        
        Friend Sub New()
            MyBase.New("OutsideDocs")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property PACSIDColumn As DataColumn
            Get
                Return Me.columnPACSID
            End Get
        End Property
        
        Friend ReadOnly Property LastNameColumn As DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        Friend ReadOnly Property FirstNameColumn As DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        Friend ReadOnly Property FullNameColumn As DataColumn
            Get
                Return Me.columnFullName
            End Get
        End Property
        
        Friend ReadOnly Property CurrentEmployeeColumn As DataColumn
            Get
                Return Me.columnCurrentEmployee
            End Get
        End Property
        
        Friend ReadOnly Property Email_AddressColumn As DataColumn
            Get
                Return Me.columnEmail_Address
            End Get
        End Property
        
        Friend ReadOnly Property DivisionColumn As DataColumn
            Get
                Return Me.columnDivision
            End Get
        End Property
        
        Friend ReadOnly Property _Sub_divisionColumn As DataColumn
            Get
                Return Me.column_Sub_division
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OutsideDocsRow
            Get
                Return CType(Me.Rows(index),OutsideDocsRow)
            End Get
        End Property
        
        Public Event OutsideDocsRowChanged As OutsideDocsRowChangeEventHandler
        
        Public Event OutsideDocsRowChanging As OutsideDocsRowChangeEventHandler
        
        Public Event OutsideDocsRowDeleted As OutsideDocsRowChangeEventHandler
        
        Public Event OutsideDocsRowDeleting As OutsideDocsRowChangeEventHandler
        
        Public Overloads Sub AddOutsideDocsRow(ByVal row As OutsideDocsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOutsideDocsRow(ByVal PACSID As String, ByVal LastName As String, ByVal FirstName As String, ByVal FullName As String, ByVal CurrentEmployee As Integer, ByVal Email_Address As String, ByVal Division As String, ByVal _Sub_division As String) As OutsideDocsRow
            Dim rowOutsideDocsRow As OutsideDocsRow = CType(Me.NewRow,OutsideDocsRow)
            rowOutsideDocsRow.ItemArray = New Object() {Nothing, PACSID, LastName, FirstName, FullName, CurrentEmployee, Email_Address, Division, _Sub_division}
            Me.Rows.Add(rowOutsideDocsRow)
            Return rowOutsideDocsRow
        End Function
        
        Public Function FindByPACSID(ByVal PACSID As String) As OutsideDocsRow
            Return CType(Me.Rows.Find(New Object() {PACSID}),OutsideDocsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OutsideDocsDataTable = CType(MyBase.Clone,OutsideDocsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OutsideDocsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnPACSID = Me.Columns("PACSID")
            Me.columnLastName = Me.Columns("LastName")
            Me.columnFirstName = Me.Columns("FirstName")
            Me.columnFullName = Me.Columns("FullName")
            Me.columnCurrentEmployee = Me.Columns("CurrentEmployee")
            Me.columnEmail_Address = Me.Columns("Email Address")
            Me.columnDivision = Me.Columns("Division")
            Me.column_Sub_division = Me.Columns("Sub-division")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnPACSID = New DataColumn("PACSID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPACSID)
            Me.columnLastName = New DataColumn("LastName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastName)
            Me.columnFirstName = New DataColumn("FirstName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFirstName)
            Me.columnFullName = New DataColumn("FullName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFullName)
            Me.columnCurrentEmployee = New DataColumn("CurrentEmployee", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCurrentEmployee)
            Me.columnEmail_Address = New DataColumn("Email Address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmail_Address)
            Me.columnDivision = New DataColumn("Division", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDivision)
            Me.column_Sub_division = New DataColumn("Sub-division", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Sub_division)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnPACSID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnPACSID.AllowDBNull = false
            Me.columnPACSID.Unique = true
            Me.columnLastName.ReadOnly = true
            Me.columnFirstName.ReadOnly = true
            Me.columnCurrentEmployee.ReadOnly = true
            Me.columnDivision.ReadOnly = true
            Me.column_Sub_division.ReadOnly = true
        End Sub
        
        Public Function NewOutsideDocsRow() As OutsideDocsRow
            Return CType(Me.NewRow,OutsideDocsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OutsideDocsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OutsideDocsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OutsideDocsRowChangedEvent) Is Nothing) Then
                RaiseEvent OutsideDocsRowChanged(Me, New OutsideDocsRowChangeEvent(CType(e.Row,OutsideDocsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OutsideDocsRowChangingEvent) Is Nothing) Then
                RaiseEvent OutsideDocsRowChanging(Me, New OutsideDocsRowChangeEvent(CType(e.Row,OutsideDocsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OutsideDocsRowDeletedEvent) Is Nothing) Then
                RaiseEvent OutsideDocsRowDeleted(Me, New OutsideDocsRowChangeEvent(CType(e.Row,OutsideDocsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OutsideDocsRowDeletingEvent) Is Nothing) Then
                RaiseEvent OutsideDocsRowDeleting(Me, New OutsideDocsRowChangeEvent(CType(e.Row,OutsideDocsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOutsideDocsRow(ByVal row As OutsideDocsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OutsideDocsRow
        Inherits DataRow
        
        Private tableOutsideDocs As OutsideDocsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOutsideDocs = CType(Me.Table,OutsideDocsDataTable)
        End Sub
        
        Public Property ID As Integer
            Get
                Return CType(Me(Me.tableOutsideDocs.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableOutsideDocs.IDColumn) = value
            End Set
        End Property
        
        Public Property PACSID As String
            Get
                Return CType(Me(Me.tableOutsideDocs.PACSIDColumn),String)
            End Get
            Set
                Me(Me.tableOutsideDocs.PACSIDColumn) = value
            End Set
        End Property
        
        Public Property LastName As String
            Get
                Try 
                    Return CType(Me(Me.tableOutsideDocs.LastNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsideDocs.LastNameColumn) = value
            End Set
        End Property
        
        Public Property FirstName As String
            Get
                Try 
                    Return CType(Me(Me.tableOutsideDocs.FirstNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsideDocs.FirstNameColumn) = value
            End Set
        End Property
        
        Public Property FullName As String
            Get
                Try 
                    Return CType(Me(Me.tableOutsideDocs.FullNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsideDocs.FullNameColumn) = value
            End Set
        End Property
        
        Public Property CurrentEmployee As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOutsideDocs.CurrentEmployeeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsideDocs.CurrentEmployeeColumn) = value
            End Set
        End Property
        
        Public Property Email_Address As String
            Get
                Try 
                    Return CType(Me(Me.tableOutsideDocs.Email_AddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsideDocs.Email_AddressColumn) = value
            End Set
        End Property
        
        Public Property Division As String
            Get
                Try 
                    Return CType(Me(Me.tableOutsideDocs.DivisionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsideDocs.DivisionColumn) = value
            End Set
        End Property
        
        Public Property _Sub_division As String
            Get
                Try 
                    Return CType(Me(Me.tableOutsideDocs._Sub_divisionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOutsideDocs._Sub_divisionColumn) = value
            End Set
        End Property
        
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableOutsideDocs.LastNameColumn)
        End Function
        
        Public Sub SetLastNameNull()
            Me(Me.tableOutsideDocs.LastNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableOutsideDocs.FirstNameColumn)
        End Function
        
        Public Sub SetFirstNameNull()
            Me(Me.tableOutsideDocs.FirstNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFullNameNull() As Boolean
            Return Me.IsNull(Me.tableOutsideDocs.FullNameColumn)
        End Function
        
        Public Sub SetFullNameNull()
            Me(Me.tableOutsideDocs.FullNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCurrentEmployeeNull() As Boolean
            Return Me.IsNull(Me.tableOutsideDocs.CurrentEmployeeColumn)
        End Function
        
        Public Sub SetCurrentEmployeeNull()
            Me(Me.tableOutsideDocs.CurrentEmployeeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmail_AddressNull() As Boolean
            Return Me.IsNull(Me.tableOutsideDocs.Email_AddressColumn)
        End Function
        
        Public Sub SetEmail_AddressNull()
            Me(Me.tableOutsideDocs.Email_AddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDivisionNull() As Boolean
            Return Me.IsNull(Me.tableOutsideDocs.DivisionColumn)
        End Function
        
        Public Sub SetDivisionNull()
            Me(Me.tableOutsideDocs.DivisionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Is_Sub_divisionNull() As Boolean
            Return Me.IsNull(Me.tableOutsideDocs._Sub_divisionColumn)
        End Function
        
        Public Sub Set_Sub_divisionNull()
            Me(Me.tableOutsideDocs._Sub_divisionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OutsideDocsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OutsideDocsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OutsideDocsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OutsideDocsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
